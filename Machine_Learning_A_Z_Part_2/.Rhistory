dataset = read.csv ('dataroe.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = kills ~ .,
data = training_set)
summary(regressor)
regressor = lm(formula = kills ~ .,
data = dataset)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = kills ~ .,
data = dataset)
regressor = lm(formula = Kills ~ .,
data = dataset)
summary(regressor)
View(dataset)
View(dataset)
# Print the coefficients
print(regressor$coefficients)
# Print the formula
print(regressor$formula)
y_pred = predict(regressor, newdata = test_set)
View(dataset)
View(dataset)
#simple linear regression
dataset = read.csv ('dataroe.csv')
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
# Print the formula
print(regressor$formula)
View(dataset)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
y_pred = predict(regressor, newdata = test_set)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$Kills, y = training_set$Kills),
colour = 'red') +
geom_line(aes(x = training_set$Deaths, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Kills vs Deaths (Training set)') +
xlab('Deaths') +
ylab('Kills')
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$Kills, y = training_set$Kills),
colour = 'red') +
geom_line(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_point(aes(x = test_set$Kills, y = test_set$Kills),
colour = 'gree') +
geom_line(aes(x = training_set$Deaths, y = predict(regressor, newdata = training_set)),
colour = 'black') +
ggtitle('Kills vs Deaths') +
xlab('Deaths') +
ylab('Kills')
View(test_set)
View(training_set)
ggplot() +
geom_point(aes(x = training_set$Kills, y = training_set$Kills),
colour = 'red') +
geom_line(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_point(aes(x = test_set$Kills, y = test_set$Kills),
colour = 'green') +
geom_points(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'black') +
ggtitle('Kills vs Deaths') +
xlab('Deaths') +
ylab('Kills')
ggplot() +
geom_point(aes(x = training_set$Kills, y = training_set$Kills),
colour = 'red') +
geom_line(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_point(aes(x = test_set$Kills, y = test_set$Kills),
colour = 'green') +
geom_point(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'black') +
ggtitle('Kills vs Deaths') +
xlab('Deaths') +
ylab('Kills')
ggplot() +
geom_point(aes(x = training_set$Kills, y = training_set$Kills),
colour = 'red') +
geom_line(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_point(aes(x = test_set$Kills, y = test_set$Kills),
colour = 'green') +
geom_point(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'black') +
ggtitle('Kills vs Model') +
xlab('Deaths') +
ylab('MOdel')
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
View(dataset)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$Kills, y = training_set$Kills),
colour = 'red') +
geom_line(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_point(aes(x = test_set$Kills, y = test_set$Kills),
colour = 'green') +
geom_line(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'black') +
ggtitle('Kills vs Model') +
xlab('Deaths') +
ylab('MOdel')
ggplot() +
geom_point(aes(x = training_set$Kills, y = training_set$Kills),
colour = 'red') +
geom_line(aes(x = training_set$Kills, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
geom_point(aes(x = test_set$Kills, y = test_set$Kills),
colour = 'green') +
ggtitle('Kills vs Model') +
xlab('Deaths') +
ylab('MOdel')
ggplot() +
geom_point(aes(x = training_set$Kills, y = training_set$Kills),
colour = 'red') +
geom_line(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
geom_point(aes(x = test_set$Kills, y = test_set$Kills),
colour = 'green') +
ggtitle('Kills vs Model') +
xlab('Deaths') +
ylab('MOdel')
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$Kills, y = training_set$Kills),
colour = 'red') +
geom_point(aes(x = test_set$Kills, y = test_set$Kills),
colour = 'green') +
geom_line(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Kills vs Model') +
xlab('Deaths') +
ylab('MOdel')
ggplot()+
geom_point(aes(x = training_set$Model, y = training_set$Kills), color = 'red')+
geom_line(aes(x = training_set$Model, y = predict(regressor, newdata = training_set)), color = 'blue')+
geom_point(aes(x = test_set$Model, y = test_set$Kills), color = 'green')+
ggtitle('Kills vs Model (Training+Test set)')+
xlab('Model')+
ylab('Kills')
ggplot()+
geom_point(aes(x = training_set$Kills, y = training_set$Kills), color = 'red')+
geom_line(aes(x = training_set$Kills, y = predict(regressor, newdata = training_set)), color = 'blue')+
geom_point(aes(x = test_set$Kills, y = test_set$Kills), color = 'green')+
ggtitle('Kills vs Model (Training+Test set)')+
xlab('Model')+
ylab('Kills')
ggplot()+
geom_point(aes(x = training_set$Kills, y = training_set$Kills), color = 'red')+
geom_line(aes(x = predict(regressor, newdata = training_set), y = predict(regressor, newdata = training_set)), color = 'blue')+
geom_point(aes(x = test_set$Kills, y = test_set$Kills), color = 'green')+
ggtitle('Kills vs Model (Training+Test set)')+
xlab('Model')+
ylab('Kills')
summary(regressor)
View(regressor)
print(regressor$call)
print(regressor$call[[2]])
coefficients(refressor)
coefficients(regressor)
as.formula(
paste0("y ~ ", round(coefficients(regressor)[1],2), "",
paste(sprintf(" %+.2f*%s ",
coefficients(regressor)[-1],
names(coefficients(regressor)[-1])),
collapse="")
)
)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
print(regressor$call[[2]])
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Kills x Model
library(ggplot2)
ggplot()+
geom_point(aes(x = training_set$Kills, y = training_set$Kills), color = 'red')+
geom_line(aes(x = predict(regressor, newdata = training_set), y = predict(regressor, newdata = training_set)), color = 'blue')+
geom_point(aes(x = test_set$Kills, y = test_set$Kills), color = 'green')+
ggtitle('Kills vs Model (Training+Test set)')+
xlab('Model')+
ylab('Kills')
as.formula(
paste0("y ~ ", round(coefficients(regressor)[1],2), "",
paste(sprintf(" %+.2f*%s ",
coefficients(regressor)[-1],
names(coefficients(regressor)[-1])),
collapse="")
)
)
View(dataset)
View(training_set)
View(test_set)
summary(regressor)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
print(regressor$call[[2]])
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Kills x Model
library(ggplot2)
ggplot()+
geom_point(aes(x = training_set$Kills, y = training_set$Kills), color = 'red')+
geom_line(aes(x = predict(regressor, newdata = training_set), y = predict(regressor, newdata = training_set)), color = 'blue')+
geom_point(aes(x = test_set$Kills, y = test_set$Kills), color = 'green')+
ggtitle('Kills vs Model (Training+Test set)')+
xlab('Model')+
ylab('Kills')
as.formula(
paste0("y ~ ", round(coefficients(regressor)[1],2), "",
paste(sprintf(" %+.2f*%s ",
coefficients(regressor)[-1],
names(coefficients(regressor)[-1])),
collapse="")
)
)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,
data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
print(regressor$call[[2]])
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Kills x Model
library(ggplot2)
ggplot()+
geom_point(aes(x = training_set$Kills, y = training_set$Kills), color = 'red')+
geom_line(aes(x = predict(regressor, newdata = training_set), y = predict(regressor, newdata = training_set)), color = 'blue')+
geom_point(aes(x = test_set$Kills, y = test_set$Kills), color = 'green')+
ggtitle('Kills vs Model (Training+Test set)')+
xlab('Model')+
ylab('Kills')
as.formula(
paste0("y ~ ", round(coefficients(regressor)[1],2), "",
paste(sprintf(" %+.2f*%s ",
coefficients(regressor)[-1],
names(coefficients(regressor)[-1])),
collapse="")
)
)
regressor = lm(formula = Kills ~ .,data = dataset)
summary(regressor)
View(regressor)
View(dataset)
View(regressor)
# Print the coefficients
print(regressor$coefficients)
print(regressor$call[[2]])
print(regressor$call[2])
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Kills x Model
library(ggplot2)
ggplot()+
geom_point(aes(x = training_set$Kills, y = training_set$Kills), color = 'red')+
geom_line(aes(x = predict(regressor, newdata = training_set), y = predict(regressor, newdata = training_set)), color = 'blue')+
geom_point(aes(x = test_set$Kills, y = test_set$Kills), color = 'green')+
ggtitle('Kills vs Model (Training+Test set)')+
xlab('Model')+
ylab('Kills')
as.formula(
paste0("y ~ ", round(coefficients(regressor)[1],2), "",
paste(sprintf(" %+.2f*%s ",
coefficients(regressor)[-1],
names(coefficients(regressor)[-1])),
collapse="")
)
)
summary(regressor)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
print(regressor$call[2])
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Kills x Model
library(ggplot2)
ggplot()+
geom_point(aes(x = training_set$Kills, y = training_set$Kills), color = 'red')+
geom_line(aes(x = predict(regressor, newdata = training_set), y = predict(regressor, newdata = training_set)), color = 'blue')+
geom_point(aes(x = test_set$Kills, y = test_set$Kills), color = 'green')+
ggtitle('Kills vs Model (Training+Test set)')+
xlab('Model')+
ylab('Kills')
as.formula(
paste0("y ~ ", round(coefficients(regressor)[1],2), "",
paste(sprintf(" %+.2f*%s ",
coefficients(regressor)[-1],
names(coefficients(regressor)[-1])),
collapse="")
)
)
#simple linear regression
dataset = read.csv ('roedata.csv')
library(caTools)
set.seed(123)
# making a regressor model to predict kills do dataroe.csv  dataset
split = sample.split(dataset$Kills, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Kills ~ .,data = dataset)
summary(regressor)
# Print the coefficients
print(regressor$coefficients)
print(regressor$call[2])
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Kills x Model
library(ggplot2)
ggplot()+
geom_point(aes(x = training_set$Kills, y = training_set$Kills), color = 'red')+
geom_line(aes(x = predict(regressor, newdata = training_set), y = predict(regressor, newdata = training_set)), color = 'blue')+
geom_point(aes(x = test_set$Kills, y = test_set$Kills), color = 'green')+
ggtitle('Kills vs Model (Training+Test set)')+
xlab('Model')+
ylab('Kills')
as.formula(
paste0("y ~ ", round(coefficients(regressor)[1],2), "",
paste(sprintf(" %+.2f*%s ",
coefficients(regressor)[-1],
names(coefficients(regressor)[-1])),
collapse="")
)
)
